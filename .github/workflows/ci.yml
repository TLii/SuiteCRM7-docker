name: CI pipeline for SuiteCRM 7 container build


on:
  push:

  pull_request:
    types: [opened, reopened]

  workflow_call:
    inputs:
      disable_upstream_check:
        type: boolean
        required: false
        description: 'Disable upstream check e.g. if that has already been done and new data committed to repository.'
      upstream_head:
        type: string
        required: false
        description: 'Commit id on the upstream'
      upstream_branch:
        type: string
        required: false
        description: 'Upstream branch to use'
      branch:
        type: string
        required: false
        description: 'Branch to use'
        default: ${{ github.ref_name }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:

  # Setup ALWAYS depends on the project!
  setup:
    name: Setup Workflow run
    runs-on: ubuntu-latest

    outputs:
      upstream_branch: ${{ steps.branches.outputs.upstream_branch }}
      branch: ${{ steps.branches.outputs.branch }}
      recorded_upstream_head: ${{ steps.recorded_versions.outputs.upstream_head }}
      recorded_build_head: ${{ steps.recorded_versions.outputs.build_head }}
      recorded_app_version: ${{ steps.recorded_versions.outputs.app_version }}
      recorded_image_version: ${{ steps.recorded_versions.outputs.image_version }}
      current_upstream_head: ${{ steps.current_versions.outputs.upstream_head }}
      current_build_head: ${{ steps.current_versions.outputs.build_head }}
      current_app_version: ${{ steps.current_versions.outputs.app_version }}

    steps:

    - name: Set working branches
      id: branches
      run: |
        # If this is a release build, set branches accordingly.
        release_check=${{ inputs.is_release_build }}
        if [[ $release_check == true ]]; then
          branch=master
          upstream_branch=hotfix

        # In other cases, determine upstream between "develop" and "hotfix"

        elif ${{ github.event_name == 'workflow_call' }}; then
        # If branch and upstream branch were given as inputs, use them.
          upstream_branch="${{ inputs.upstream_branch }}"
          branch="${{ inputs.branch }}"

          echo "Using input branch '$branch' and input upstream branch '$upstream_branch'"
          echo "branch=$branch" >> "$GITHUB_OUTPUT"
          echo "upstream_branch=$upstream_branch" >> "$GITHUB_OUTPUT"

        else
        # If branches were not provided, determine based on working branch.

          branch=${{ github.ref_name }}
          echo "branch=$branch" >> "$GITHUB_OUTPUT"

          case $branch in
            'volatile')
              echo "upstream_branch=develop" >> "$GITHUB_OUTPUT"
              echo "Upstream branch is 'develop'"
              ;;
            'develop')
              echo "upstream_branch=hotfix" >> "$GITHUB_OUTPUT"
              echo "Upstream branch is 'hotfix'"
              ;;
            'master')
              echo "upstream_branch=hotfix" >> "$GITHUB_OUTPUT"
              echo "Upstream branch is 'hotfix'"
              ;;
            *)
              echo "upstream_branch=hotfix" >> "$GITHUB_OUTPUT"
              echo "Didn't recognize branch '$branch' for upstream, so using 'hotfix' as upstream branch."
              ;;
          esac
        fi

    - uses: actions/checkout@v3
      name: Code checkout
      with:
        ref: ${{ steps.branches.outputs.branch }}

    - name: Get recorded version information
      id: recorded_versions
      run: |
        # Get current recorded upstream app head
        if [[ -f $PWD/.ci/app_head-${{ github.ref_name }}.txt ]]; then
          recorded_upstream_head=$(cat $PWD/.ci/app_head-${{ github.ref_name }}.txt)
        else
          recorded_upstream_head=''
          touch $PWD/.ci/app_head-${{ github.ref_name }}.txt
        fi
        echo "upstream_head=$recorded_upstream_head" >> "$GITHUB_OUTPUT"
        echo "Last recorded upstream head is $recorded_upstream_head"

        # Get last upstream app version
        if [[ -f $PWD/.ci/app_version-${{ github.ref_name }}.txt ]]; then
          recorded_app_version=$(cat $PWD/.ci/app_version-${{ github.ref_name }}.txt)
        else
          recorded_app_version=''
          touch $PWD/.ci/app_version-${{ github.ref_name }}.txt
        fi
        echo "app_version=$recorded_app_version" >> "$GITHUB_OUTPUT"
        echo "Last recorded upstream app version is $recorded_app_version"

        # Get last own build head
        if [[ -f $PWD/.ci/build_head-${{ github.ref_name }}.txt ]]; then
          recorded_build_head=$(cat $PWD/.ci/build_head-${{ github.ref_name }}.txt)
        else
          recorded_build_head=''
          touch $PWD/.ci/build_head-${{ github.ref_name }}.txt
        fi
        echo "build_head=$recorded_build_head" >> "$GITHUB_OUTPUT"
        echo "Last recorded build head is $recorded_build_head"

        # Get last image version
        if [[ -f $PWD/.ci/image_version-${{ github.ref_name }}.txt ]]; then
          recorded_image_version=$(cat $PWD/.ci/image_version-${{ github.ref_name }}.txt)
          [[ -n recorded_image_version ]] || (
            echo "No recorded image version, using 0.0.1"
            recorded_image_version="0.0.1"
          )
        else
          recorded_image_version=''
          touch $PWD/.ci/image_version-${{ github.ref_name }}.txt
        fi
        echo "image_version=$recorded_image_version" >> "$GITHUB_OUTPUT"
        echo "Last recorded image version is $recorded_image_version"

    - name: Get current version information
      id: current_versions
      run: |
        # Get current upstream app head by checking its repository.
        # *NOTE*: This command depends of the target repo and should always be verified by hand.
        upstream_head=$(git ls-remote ${{ vars.upstream_repo }} | grep -e 'refs/heads/${{ steps.branches.outputs.upstream_branch }}$' | head -n1 | awk '{print $1}')
        [[ -n upstream_head ]] || echo "No upstream head found!"
        echo "Current upstream head is $upstream_head"
        echo "upstream_head=$upstream_head" >> "$GITHUB_OUTPUT"

        # Get current upstream app version
        app_version=$(git ls-remote --refs --tags --sort='v:refname' ${{ vars.upstream_repo }} | awk '{print $2}' | sed -E 's#.+/tags/(.+)#\1#g' | grep -e 'v[0-9]*.[0-9]*.[0-9]*$' |tail -1)
        [[ -n app_version ]] || app_version='v0.0.0-temp '
        echo "Current application version is $app_version"
        echo "app_version=$app_version" >> "$GITHUB_OUTPUT"

        # Get current own build head
        build_head=${{ github.sha }}
        echo "Current build head is $build_head"
        echo "build_head=$build_head" >> "$GITHUB_OUTPUT"

        # Current image version will be determined later

  check_upstream:
    name: Check upstream for changes
    uses: TLii/workflows/.github/workflows/check_upstream_head.yml@master
    needs: setup
    with:
      upstream_repo: ${{ vars.upstream_repo }}
      upstream_branch: ${{ needs.setup.outputs.upstream_branch }}
    if: |
      (github.event_name != 'workflow_call' ||
      (github.event_name == 'workflow_call' &&
      inputs.disable_upstream_check != true))


  pipeline_planner:
    name: Decide on which steps to run
    runs-on: ubuntu-latest
    needs: [setup, check_upstream]
    if: success() || failure()
    outputs:
      update_needed: ${{ steps.update.outputs.update_needed }}
      release_needed: ${{ steps.release.outputs.is_new_release }}

    steps:

    - uses: actions/checkout@v3
      name: Code checkout
      with:
        ref: ${{ needs.setup.outputs.branch }}
        fetch-depth: 0

    - name: Check if release is needed
      id: release
      run: |
        app_version=${{ needs.setup.outputs.current_app_version }}

        recorded_app_version=${{ needs.setup.outputs.recorded_app_version }}

        if [[ $app_version != $recorded_app_version ]]; then
          echo "is_new_release=true" >> $GITHUB_OUTPUT
          echo "New app release ($app_version) since last build. Will create a new release later."
        else
          echo "Newest app release ($app_version) is the same as recorded version ($recorded_app_version). Not creating a new release."
        fi

    - name: Determine if update is needed
      id: update
      run: |
          event_name=${{ github.event_name }}
          check_disabled=${{ inputs.disable_upstream_check }}
          check_release=${{ steps.release.outputs.is_new_release }}

          # If CI isn't run because of a workflow_call (ie. manually or because of a push event), assume that an update is needed
          if [[ $event_name != 'workflow_call' ]]; then
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "Not called by another workflow; assuming an update is needed."

          # If this is a release build, update is needed
          elif [[ $check_release == true ]]; then
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "New release, so updating."

          # If CI is run because of a workflow_call and upstream check is disabled, assume that an update is needed
          elif [[ $event_name == 'workflow_call' && $check_disabled != true ]]; then
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "Seems like an update is needed."

          # If no condition was met, assume update isn't needed
          else
            echo "update_needed=false" >> $GITHUB_OUTPUT
            echo "Seems like an update isn't needed (or I didn't understand the run)."
          fi

  validate:
    name: Validate current source before build
    needs: [setup, pipeline_planner]
    if: ${{ needs.pipeline_planner.outputs.update_needed }} == 'true'
    uses: TLii/workflows/.github/workflows/validate.yml@master
    with:
      php_enabled: true
      php_version: '7.4'
      docker_enabled: true
      shell_enabled: true

  version:
    name: Decide on versioning before build
    needs: [setup, pipeline_planner]
    if: ${{ needs.pipeline_planner.outputs.update_needed }} == 'true'
    uses: TLii/workflows/.github/workflows/versioning.yml@master
    with:
      last_build_head: ${{ needs.setup.outputs.recorded_build_head }}
      current_version: ${{ needs.setup.outputs.recorded_image_version }}
      use_build_numbers: true

  build:
    name: Build current source
    needs: [validate, version, setup, pipeline_planner]
    uses: ./.github/workflows/build.yml
    if: ${{ needs.pipeline_planner.outputs.update_needed }} == 'true'
    with:
      version_number: ${{ needs.version.outputs.new_version }}
      version_type: ${{ needs.version.outputs.new_version_string }}
      current_head: ${{ github.sha }}
      upstream_head: ${{ needs.check_upstream.outputs.upstream_head }}
      branch: ${{ needs.setup.outputs.branch }}
      app_version: ${{ needs.setup.outputs.current_app_version }}
      app_name: ${{ vars.app_name }}
      registry_url: ${{ vars.registry_url }}
    secrets: inherit

  update_version_records:
    name: Update recorded version string
    runs-on: ubuntu-latest
    needs: [setup, pipeline_planner, version, build]
    if: ${{ needs.pipeline_planner.outputs.update_needed }} == 'true'
    steps:
    - uses: actions/checkout@v3
      name: Code checkout
      with:
        ref: ${{ needs.setup.outputs.branch }}
        fetch-depth: 0

    - name: Write current version information
      run: |
        echo "${{ needs.setup.outputs.current_upstream_head }}" > $PWD/.ci/app_head-${{ github.ref_name }}.txt
        echo "${{ needs.setup.outputs.current_app_version }}" > $PWD/.ci/app_version-${{ github.ref_name }}.txt
        echo "${{ needs.setup.outputs.current_build_head }}" > $PWD/.ci/build_head-${{ github.ref_name }}.txt
        echo "${{ needs.version.outputs.new_version }}" > $PWD/.ci/image_version-${{ github.ref_name }}.txt
        echo "Current values recorded."

    - name: Commit changed version number and changed ci values
      id: commit
      run: |
        git config --local user.email "github-actions@github.com"
        git config --local user.name "github-actions"
        git add .
        if [[ -z "$(git status --porcelain)" ]]; then
          # If no files were changed, there's nothing to push.
          echo "push_needed=false" >> "$GITHUB_OUTPUT"
        else
          # If files were changed, record the change.
          git commit -m "chore(Automatic version update)" -a
          echo "push_needed=true" >> "$GITHUB_OUTPUT"
        fi
      shell: bash

    - name: Push changed version commit
      if: steps.commit.outputs.push_needed == 'true'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}


  create_release:
    name: Create a release as needed
    runs-on: ubuntu-latest
    if: |
      github.ref_name == 'master' &&
      (needs.pipeline_planner.outputs.release_needed == 'true' ||
      needs.pipeline_planner.outputs.version_value  >= 6)
    needs: [setup, version, pipeline_planner, build]

    steps:

    - uses: actions/checkout@v3
      name: Code checkout
      with:
        ref: ${{ needs.setup.outputs.branch }}
        fetch-depth: 0

    - name: Determine release name
      id: release_name
      run: |
        app_version=${{ needs.setup.outputs.current_app_version }}
        version_type=${{ needs.version.outputs.new_version_string }}
        is_new_release=${{ needs.pipeline_planner.outputs.release_needed }}
        image_version=${{ needs.version.outputs.new_version}}

        if [[ $is_new_release == true ]]; then
          release_name="New release for ${{ vars.app_name }} $app_version"
          body="${{ vars.app_name}} got updated to $app_version and a new image was built with version $image_version."
          release_tag=$app_version
          makeLatest="false"
        elif [[ $version_type == 'patch' ]]; then
          release_name="Patch release $image_version"
          release_tag=$image_version
          body="This is an automated patch release for ${{ github.repository }} (not $ {{vars.app_name }}). This release contains bug fixes and/or security updates."
          makeLatest="true"
        elif [[ $version_type == 'minor' ]]; then
          release_name="Minor release $image_version"
          release_tag=$image_version
          body="This is an automated minor release for ${{ github.repository }} (not $ {{vars.app_name }}). This release contains new features and/or improvements."
          makeLatest="true"
        elif [[ $version_type == 'major' ]]; then
          release_name="Major release $image_version"
          release_tag=$image_version
          body="This is an automated major release for ${{ github.repository }} (not $ {{vars.app_name }}). This release contains breaking changes."
          makeLatest="true"
        else
          release_name="Release $image_version"
          release_tag=$image_version
          body="This is an automated release for ${{ github.repository }} (not $ {{vars.app_name }}). This release contains undefined changes."
          makeLatest="false"
        fi

        echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
        echo "release_name=$release_name" >> $GITHUB_OUTPUT
        echo "release_body=$body" >> $GITHUB_OUTPUT
        echo "make_latest=$makeLatest" >> $GITHUB_OUTPUT

    - name: Create a release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: ${{ steps.release_name.outputs.release_name }}
        tag: ${{ steps.release_name.outputs.release_tag }}
        body: ${{ steps.release_name.outputs.release_body }}
        makeLatest: ${{ steps.release_name.outputs.make_latest }}

  update_chart:
    name: Update chart upon release
    runs-on: ubuntu-latest
    if: |
      github.ref_name == 'master' &&
      (needs.pipeline_planner.outputs.release_needed == 'true' ||
      needs.pipeline_planner.outputs.update_needed  == 'true')
    needs: [setup, version, pipeline_planner, build, create_release]

    steps:
    - name: Checkout Chart
      uses: actions/checkout@v3
      with:
        repository: TLii/SuiteCRM7-chart
        token: ${{ secrets.pat }}
        path: ./chart
        ref: master

    - name: Update Chart Versions
      run: |
        CHARTVER=$(sed -n  '/^version:.*/p' "./chart/Chart.yaml" | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)
        sed -i "s/^version:.*/$CHARTVER/" "./chart/Chart.yaml"
        sed -i "s/^appVersion:.*/appVersion: ${{ needs.setup.outputs.current_app_version }} /" "./chart/Chart.yaml"
        echo "Chart version: $CHARTVER\nApp Version: ${{ needs.setup.outputs.current_app_version }}"

    - name: Push Chart
      run: |
        cd ./chart
        git add .
        git config user.name github-actions
        git config user.email github-actions@github.com
        git commit -am "chore(Automatic version updates from CI)"
        git push

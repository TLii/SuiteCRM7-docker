name: Build new image

on:
  workflow_call:
    inputs:
      app_version:
        type: string
        description: 'Version of the app to build'
        required: true
        default: '1.0.0'
      version_number:
        type: string
        required: false
        default: '0.0.0'
        description: Version number to use for the build
      version_type:
        type: string
        required: false
        default: 'build'
        description: Type of versioning to use for the build
      current_head:
        type: string
        required: false
        default: ''
        description: Current HEAD of the branch
      branch:
        type: string
        required: false
        default: ''
        description: Branch to build
      upstream_head:
        type: string
        required: false
        default: ''
        description: Current HEAD of the upstream branch
      ci_location:
        type: string
        required: false
        default: '.ci'
        description: Location of the CI data folder
      app_name:
        type: string
        required: true
        description: Name of the app to build
    secrets:
      LWCRM_PAT:
        description: 'PAT for LWCRM'
        required: true
      REGISTRY_URL:
        description: 'Registry URL'
        required: true
      REGISTRY_USERNAME:
        description: 'Registry username'
        required: true
      REGISTRY_PASSWORD:
        description: 'Registry password'
        required: true

jobs:

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        stage: [base, fpm, apache2]

    env:
      appname: ${{ inputs.app_name }}
      app_version: ${{ inputs.app_version }}
      cidata: ${{ inputs.ci_location }}
      upstream_head: ${{ inputs.upstream_head }}
      current_head: ${{ inputs.current_head }}
      version_number: ${{ inputs.version_number }}
      branch: ${{ inputs.branch }}


    steps:

    - name: Code checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.branch }}

    - name: Set current head and record it
      run: |

        GITHUB_HASH=$(git rev-parse --short "${{ env.current_head }}")
        echo "Github SHA: ${{ env.current_head }}"
        echo "Github HASH: $GITHUB_HASH"
        echo "github_hash=$GITHUB_HASH" >> "$GITHUB_ENV"

    - name: Set build-version
      run: |
        echo "Branch: ${{ env.branch }}"
        echo "Github hash: ${{ env.github_hash }}"
        echo "${{ env.appname }} version: ${{ env.app_version }}"
        build_version="${{ env.app_version }}-img-${{ env.version_number }}"
        echo "Build version: $build_version"
        echo "build_version=$build_version" >> "$GITHUB_ENV"

    - name: Determine tags
      run: |
        tags=""
        branch="${{ env.branch }}"
        app_version="${{ env.app_version }}"
        build_version="${{ env.build_version }}"
        github_hash="${{ env.github_hash }}"
        github_sha="${{ env.current_head }}"
        addlatest="false"

        if [[ ${{ env.branch }} == 'master' ]]; then
          tags="$tags, latest"
          if [[ -n $app_version ]]; then
            tags="$tags, $app_version-latest, $app-version"
          fi
          addlatest="true"
        fi

        if [[ -n $branch ]]; then
          tags="$tags, $branch, $branch-latest"
        fi
        if [[ -n branch && -n $app_version ]]; then
          tags="$tags, $branch-$app_version, $branch-$app_version-latest"
        fi

        if [[ -n $build_version ]]; then
          tags="$tags, $build_version"
        fi

        if [[ -n $github_hash ]]; then
          tags="$tags, $github_hash"
        fi

        if [[ -n $github_sha ]]; then
          tags="$tags, $github_sha"
        fi

        echo "tags=$tags" >> "$GITHUB_ENV"
        echo "addlatest=$addlatest" >> "$GITHUB_ENV"

    - name: Build and push container image
      uses: mr-smithers-excellent/docker-build-push@v6.2
      with:
        image: suitecrm7/suitecrm7
        tags: ${{ env.tags }}
        registry: ${{ vars.REGISTRY_URL }}
        dockerfile: Dockerfile
        username: ${{ secrets.REGISTRY_USER }} # optional
        password: ${{ secrets.REGISTRY_PASSWORD }} # optional
        addLatest: ${{ env.addlatest }}
        target: ${{ matrix.stage }}
